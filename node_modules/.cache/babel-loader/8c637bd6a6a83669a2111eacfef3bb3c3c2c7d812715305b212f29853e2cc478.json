{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  axios.defaults.baseURL = 'https://e9chqybpbj.execute-api.us-east-1.amazonaws.com/Dev/';\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    const options = {\n      headers: {\n        \"content-type\": \"text/plain\"\n      }\n    };\n    async function CRUDOperations(requestField, inputData, signal) {\n      if (requestField === 'addCourse') {\n        const id = parseInt(Math.floor(Math.random() * (999999 - 100 + 1) + 100));\n        const params = {\n          ID: id,\n          CourseName: inputData.CourseName,\n          CourseURL: inputData.CourseURL,\n          ImageURL: inputData.ImageURL\n        };\n        console.log(params);\n        axios.post(`/course`, options, {\n          params: params\n        }).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course creation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course creation failed.\");\n        });\n      }\n      if (requestField === 'editCourse') {\n        const params = {\n          ID: inputData.id,\n          CourseName: inputData.CourseName,\n          CourseURL: inputData.CourseURL,\n          ImageURL: inputData.ImageURL\n        };\n        axios.put(`/course/${inputData.id}`, options, {\n          params: params\n        }, inputData, {\n          signal\n        }).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course updation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course updation failed.\");\n        });\n      }\n      if (requestField === 'removeCourse') {\n        axios.delete(`/course/${inputData.id}`, options, {\n          signal\n        }).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course deletion failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n        });\n      }\n    }\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        if (queryField !== \"allCourses\") {\n          await CRUDOperations(queryField, queryAttributes, signal);\n        }\n        const response = await axios.get('/course', options, {\n          signal\n        });\n        console.log(response);\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","defaults","baseURL","queryAttributes","JSON","parse","options","headers","CRUDOperations","requestField","inputData","signal","id","parseInt","Math","floor","random","params","ID","CourseName","CourseURL","ImageURL","console","log","post","then","response","status","alert","catch","error","put","delete","fetchData","get","errorMessage","statusText","Error","message","abort"],"sources":["/Users/Zainab/Desktop/SAMAppFrontend/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n\n  axios.defaults.baseURL  = 'https://e9chqybpbj.execute-api.us-east-1.amazonaws.com/Dev/'\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    const options = { headers:\n        {\n          \"content-type\": \"text/plain\"\n        }}\n    async function CRUDOperations(requestField, inputData, signal){\n        if (requestField === 'addCourse'){\n            const id = parseInt(Math.floor(Math.random() * (999999 - 100 + 1) + 100));\n            const params = {\n              ID : id,\n              CourseName : inputData.CourseName,\n              CourseURL : inputData.CourseURL,\n              ImageURL : inputData.ImageURL\n            }\n            console.log(params)\n            axios.post(`/course`, options, { params: params}).\n            then(response => {\n                console.log(response)\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course creation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course creation failed.\");\n                });\n        }\n        if (requestField === 'editCourse'){\n          const params = {\n            ID : inputData.id,\n            CourseName : inputData.CourseName,\n            CourseURL : inputData.CourseURL,\n            ImageURL : inputData.ImageURL\n          }\n            axios.put(`/course/${inputData.id}`, options, {params: params}, inputData, { signal }).\n            then(response => {\n              console.log(response)\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course updation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course updation failed.\");\n                });\n        }\n        if (requestField === 'removeCourse'){\n            axios.delete(`/course/${inputData.id}`, options, { signal }).\n            then(response => {\n                console.log(response)\n            if (response.status !== 200) {\n                alert(\"Server Error: Course deletion failed.\");\n            }\n            })\n            .catch(error => {\n                console.error(\"Network Error:\", error);\n            });\n        }\n    }\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        if (queryField !== \"allCourses\"){\n            await CRUDOperations(queryField, queryAttributes, signal)\n        }\n        const response = await axios.get('/course', options, { signal });\n        console.log(response)\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n  // Returning useFetch response\n  return { data, success, loading };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}